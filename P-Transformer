{"cells":[{"cell_type":"markdown","metadata":{"id":"I5mA8V3fS0H1"},"source":["##데이터 준비 \n","multi30k 데이터와 토크나이져로 spacy를 이용하였으며\n","데이터 준비 코드는 그대로 참고하였습니다."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3444,"status":"ok","timestamp":1645689488153,"user":{"displayName":"박주형","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14658027942663441417"},"user_tz":-540},"id":"eiLY84NeUOWU","outputId":"624e7cad-1376-429a-e28a-ee287acfc92d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: torchtext==0.6.0 in /usr/local/lib/python3.7/dist-packages (0.6.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from torchtext==0.6.0) (1.21.5)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from torchtext==0.6.0) (1.15.0)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from torchtext==0.6.0) (4.62.3)\n","Requirement already satisfied: torch in /usr/local/lib/python3.7/dist-packages (from torchtext==0.6.0) (1.10.0+cu111)\n","Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from torchtext==0.6.0) (2.23.0)\n","Requirement already satisfied: sentencepiece in /usr/local/lib/python3.7/dist-packages (from torchtext==0.6.0) (0.1.96)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->torchtext==0.6.0) (2.10)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->torchtext==0.6.0) (3.0.4)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->torchtext==0.6.0) (1.24.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->torchtext==0.6.0) (2021.10.8)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from torch->torchtext==0.6.0) (3.10.0.2)\n"]}],"source":["!pip install torchtext==0.6.0"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"d15x_HJnUQlB"},"outputs":[],"source":["%%capture\n","!python -m spacy download en\n","!python -m spacy download de"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xX5__XbLUSTL"},"outputs":[],"source":["import spacy\n","\n","spacy_en = spacy.load('en') # 영어 토큰화(tokenization)\n","spacy_de = spacy.load('de') # 독일어 토큰화(tokenization)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7,"status":"ok","timestamp":1645689508241,"user":{"displayName":"박주형","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14658027942663441417"},"user_tz":-540},"id":"dgspLHuBUTpr","outputId":"3636adf3-c32b-444e-a148-9030e7189f10"},"outputs":[{"output_type":"stream","name":"stdout","text":["인덱스 0: I\n","인덱스 1: am\n","인덱스 2: a\n","인덱스 3: graduate\n","인덱스 4: student\n","인덱스 5: .\n"]}],"source":["tokenized = spacy_en.tokenizer(\"I am a graduate student.\")\n","\n","for i, token in enumerate(tokenized):\n","    print(f\"인덱스 {i}: {token.text}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lRc2xgivUUxv"},"outputs":[],"source":["# 독일어(Deutsch) 문장을 토큰화 하는 함수 (순서를 뒤집지 않음)\n","def tokenize_de(text):\n","    return [token.text for token in spacy_de.tokenizer(text)]\n","\n","# 영어(English) 문장을 토큰화 하는 함수\n","def tokenize_en(text):\n","    return [token.text for token in spacy_en.tokenizer(text)]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"z_FHEM4rUz4b"},"outputs":[],"source":["from torchtext.data import Field, BucketIterator\n","\n","SRC = Field(tokenize=tokenize_de, init_token=\"<sos>\", eos_token=\"<eos>\", lower=True, batch_first=True)\n","TRG = Field(tokenize=tokenize_en, init_token=\"<sos>\", eos_token=\"<eos>\", lower=True, batch_first=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"T4USeG_WU2eW"},"outputs":[],"source":["from torchtext.datasets import Multi30k\n","\n","train_dataset, valid_dataset, test_dataset = Multi30k.splits(exts=(\".de\", \".en\"), fields=(SRC, TRG))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":17,"status":"ok","timestamp":1645689521803,"user":{"displayName":"박주형","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14658027942663441417"},"user_tz":-540},"id":"tqgKFWk-U4Sh","outputId":"e1dbb75d-abfa-4785-9ffc-d333486d1de5"},"outputs":[{"output_type":"stream","name":"stdout","text":["학습 데이터셋(training dataset) 크기: 29000개\n","평가 데이터셋(validation dataset) 크기: 1014개\n","테스트 데이터셋(testing dataset) 크기: 1000개\n"]}],"source":["print(f\"학습 데이터셋(training dataset) 크기: {len(train_dataset.examples)}개\")\n","print(f\"평가 데이터셋(validation dataset) 크기: {len(valid_dataset.examples)}개\")\n","print(f\"테스트 데이터셋(testing dataset) 크기: {len(test_dataset.examples)}개\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":14,"status":"ok","timestamp":1645689521803,"user":{"displayName":"박주형","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14658027942663441417"},"user_tz":-540},"id":"kZiKI4W9U6V_","outputId":"0bc0aef6-0742-4708-a303-470b97eda210"},"outputs":[{"output_type":"stream","name":"stdout","text":["['ein', 'junger', 'mann', 'in', 'einer', 'schwarz-gelben', 'jacke', 'blickt', 'etwas', 'an', 'und', 'lächelt', '.']\n","['a', 'young', 'man', 'in', 'a', 'black', 'and', 'yellow', 'jacket', 'is', 'gazing', 'at', 'something', 'and', 'smiling', '.']\n"]}],"source":["# 학습 데이터 중 하나를 선택해 출력\n","print(vars(train_dataset.examples[29])['src'])\n","print(vars(train_dataset.examples[29])['trg'])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1035,"status":"ok","timestamp":1645689522827,"user":{"displayName":"박주형","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14658027942663441417"},"user_tz":-540},"id":"cVZM7Rs1U78I","outputId":"24729c25-bcff-4a07-d8a4-549f478b167b"},"outputs":[{"output_type":"stream","name":"stdout","text":["len(SRC): 7855\n","len(TRG): 5893\n"]}],"source":["SRC.build_vocab(train_dataset, min_freq=2)\n","TRG.build_vocab(train_dataset, min_freq=2)\n","\n","print(f\"len(SRC): {len(SRC.vocab)}\")\n","print(f\"len(TRG): {len(TRG.vocab)}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qeELikbsVEAj"},"outputs":[],"source":["import torch\n","\n","device = torch.device('cpu')\n","\n","BATCH_SIZE = 128\n","\n","# 일반적인 데이터 로더(data loader)의 iterator와 유사하게 사용 가능\n","train_iterator, valid_iterator, test_iterator = BucketIterator.splits(\n","    (train_dataset, valid_dataset, test_dataset),\n","    batch_size=BATCH_SIZE,\n","    device=device)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2,"status":"ok","timestamp":1645689522827,"user":{"displayName":"박주형","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14658027942663441417"},"user_tz":-540},"id":"DBDI_mPBH4Px","outputId":"5e5b589d-3805-4c14-fe86-4edee5d221c3"},"outputs":[{"output_type":"stream","name":"stdout","text":["첫 번째 배치 크기: torch.Size([128, 28])\n","인덱스 0: 2\n","인덱스 1: 18\n","인덱스 2: 30\n","인덱스 3: 879\n","인덱스 4: 5\n","인덱스 5: 0\n","인덱스 6: 27\n","인덱스 7: 14\n","인덱스 8: 2309\n","인덱스 9: 4\n","인덱스 10: 3\n","인덱스 11: 1\n","인덱스 12: 1\n","인덱스 13: 1\n","인덱스 14: 1\n","인덱스 15: 1\n","인덱스 16: 1\n","인덱스 17: 1\n","인덱스 18: 1\n","인덱스 19: 1\n","인덱스 20: 1\n","인덱스 21: 1\n","인덱스 22: 1\n","인덱스 23: 1\n","인덱스 24: 1\n","인덱스 25: 1\n","인덱스 26: 1\n","인덱스 27: 1\n"]}],"source":["for i, batch in enumerate(train_iterator):\n","    src = batch.src\n","    trg = batch.trg\n","\n","    print(f\"첫 번째 배치 크기: {src.shape}\")\n","\n","    # 현재 배치에 있는 하나의 문장에 포함된 정보 출력\n","    for i in range(src.shape[1]):\n","        print(f\"인덱스 {i}: {src[0][i].item()}\") # 여기에서는 [Seq_num, Seq_len]\n","\n","    # 첫 번째 배치만 확인\n","    break"]},{"cell_type":"markdown","metadata":{"id":"hwk90rXaSroR"},"source":["##멀티해드 어텐션 구현 "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qriexae9H63v"},"outputs":[],"source":["import torch.nn as nn\n","\n","class MultiHeadAttentionLayer(nn.Module):\n","  \n","  def __init__(self, hidden_dim, n_heads, device):\n","    super().__init__()\n","\n","    self.hidden_dim = hidden_dim \n","    self.n_heads = n_heads \n","    self.head_dim = hidden_dim // n_heads\n","\n","    self.fc_q = nn.Linear(hidden_dim, hidden_dim) \n","    self.fc_k = nn.Linear(hidden_dim, hidden_dim) \n","    self.fc_v = nn.Linear(hidden_dim, hidden_dim) \n","\n","    self.fc_o = nn.Linear(hidden_dim, hidden_dim)\n","    #concat이후 마지막으로 거쳐가는 linear입니다.\n","    self.scale = torch.sqrt(torch.FloatTensor([self.head_dim])).to(device)\n","    #attention을 구하는 과정에서 Q K를 곱한 값이 너무 커지는 것을 막기위해서 적당한 값을 나눠줌 여기서는 루트 head_dim 입니다.\n","\n","  def forward(self, query, key, value, mask = None):\n","\n","    batch_size = query.shape[0] \n","    #query key value의 배치 사이즈를 확인하기 위해서 shape의 첫번째 값 확인합니다.\n","\n","    # query: [batch_size, query_len, hidden_dim]\n","    # key: [batch_size, key_len, hidden_dim]\n","    # value: [batch_size, value_len, hidden_dim]\n","\n","    Q = self.fc_q(query)\n","    K = self.fc_k(key)\n","    V = self.fc_v(value)\n","\n","    # fc의 W가 hidden_dim * hidden_dim이기때문에 형태가 그대로 나옵니다.\n","\n","    # Q: [batch_size, query_len, hidden_dim]\n","    # K: [batch_size, key_len, hidden_dim]\n","    # V: [batch_size, value_len, hidden_dim]\n","\n","    # hidden_dim → n_heads X head_dim 형태로 변형\n","    # n_heads(h)개의 서로 다른 어텐션(attention) 컨셉을 학습하도록 유도\n","\n","    # view를 통해서 [batch_size, ??? , n_heads, head_dim]의 shape로 변환 ???는 자연스럽게 query_len이 됨\n","    # permute를 통해서 n_heads와 query_len 위치를 바꿔줌\n","    Q = Q.view(batch_size, -1, self.n_heads, self.head_dim).permute(0, 2, 1, 3)\n","    K = K.view(batch_size, -1, self.n_heads, self.head_dim).permute(0, 2, 1, 3)\n","    V = V.view(batch_size, -1, self.n_heads, self.head_dim).permute(0, 2, 1, 3)\n","\n","    # Q: [batch_size, n_heads, query_len, head_dim]\n","    # K: [batch_size, n_heads, key_len, head_dim]\n","    # V: [batch_size, n_heads, value_len, head_dim]\n","\n","    # Attention Energy 계산 Q, K 전치한 것을 계산\n","    energy = torch.matmul(Q, K.permute(0, 1, 3, 2)) / self.scale\n","\n","    # energy: [batch_size, n_heads, query_len, key_len] \n","    # 마스크(mask)를 사용하는 경우\n","    if mask is not None:\n","        # 마스크(mask) 값이 0인 부분을 -1e10으로 채우기\n","        # 마이너스 무한의 값을 넣어주면서 의미없는 값으로 바꾸는 과정\n","\n","        energy = energy.masked_fill(mask==0, -1e10)\n","\n","    # 어텐션(attention) 스코어 계산: 각 단어에 대한 확률 값\n","    attention = torch.softmax(energy, dim=-1)\n","\n","    # attention: [batch_size, n_heads, query_len, key_len]\n","\n","    # 여기에서 Scaled Dot-Product Attention을 계산\n","    x = torch.matmul(attention, V)\n","\n","    # x: [batch_size, n_heads, query_len, head_dim]\n","\n","    # 아래는 head개수에 따라서 나눴던 matrix를 다시 합쳐주는 과정입니다.\n","\n","    x = x.permute(0, 2, 1, 3).contiguous()\n","\n","    # x: [batch_size, query_len, n_heads, head_dim]\n","\n","    x = x.view(batch_size, -1, self.hidden_dim)\n","\n","    # x: [batch_size, query_len, hidden_dim]\n","\n","    x = self.fc_o(x)\n","\n","    # x: [batch_size, query_len, hidden_dim]\n","\n","    return x, attention\n"]},{"cell_type":"markdown","metadata":{"id":"rq7BqMQASRMV"},"source":["### 멀티헤드 어텐션 이후 residual learning을 위한 add 및 normalization을 마치면 feedforwardLayer를 통해서 한번 정재해주는 과정을 가집니다."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fJ8suKASR0J0"},"outputs":[],"source":["class PositionwiseFeedforwardLayer(nn.Module):\n","    def __init__(self, hidden_dim, pf_dim):\n","        super().__init__()\n","\n","        self.fc_1 = nn.Linear(hidden_dim, pf_dim)\n","        self.fc_2 = nn.Linear(pf_dim, hidden_dim)\n","\n","        \n","\n","    def forward(self, x):\n","\n","        # x: [batch_size, seq_len, hidden_dim]\n","\n","        x = torch.relu(self.fc_1(x))\n","\n","        # x: [batch_size, seq_len, pf_dim]\n","\n","        x = self.fc_2(x)\n","\n","        # x: [batch_size, seq_len, hidden_dim]\n","\n","        return x\n"]},{"cell_type":"markdown","metadata":{"id":"9j8odCq5W1QG"},"source":["## 셀프 어텐션을 진행할 EncoderLayer를 생성\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4OSUoulKTIt4"},"outputs":[],"source":["class EncoderLayer(nn.Module):\n","    def __init__(self, hidden_dim, n_heads, pf_dim, device):\n","        super().__init__()\n","\n","        self.self_attn_layer_norm = nn.LayerNorm(hidden_dim)\n","        self.ff_layer_norm = nn.LayerNorm(hidden_dim)\n","        self.self_attention = MultiHeadAttentionLayer(hidden_dim, n_heads, device)\n","        self.positionwise_feedforward = PositionwiseFeedforwardLayer(hidden_dim, pf_dim)\n","        \n","\n","    # 하나의 임베딩이 복제되어 Query, Key, Value로 입력되는 방식\n","    def forward(self, src, src_mask):\n","\n","        # src: [batch_size, src_len, hidden_dim]\n","        # src_mask: [batch_size, src_len]\n","\n","        # self attention\n","        # 필요한 경우 마스크(mask) 행렬을 이용하여 어텐션(attention)할 단어를 조절 가능\n","        _src, _ = self.self_attention(src, src, src, src_mask)\n","\n","        # residual connection and layer norm\n","        # 셀프 어텐션을 진행한 _src에 원래 src를 더하여 residual learning 진행\n","        src = self.self_attn_layer_norm(src + _src)\n","\n","        # src: [batch_size, src_len, hidden_dim]\n","\n","        # position-wise feedforward\n","        _src = self.positionwise_feedforward(src)\n","\n","        # residual and layer norm\n","        src = self.ff_layer_norm(src + _src)\n","\n","        # src: [batch_size, src_len, hidden_dim]\n","\n","        return src"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HBz1n4QOWzqp"},"outputs":[],"source":["class Encoder(nn.Module):\n","    def __init__(self, input_dim, hidden_dim, n_layers, n_heads, pf_dim, device, max_length=100):\n","        super().__init__()\n","\n","        self.n_heads = n_heads\n","        self.hidden_dim = hidden_dim\n","        self.n_layers = n_layers\n","        self.pf_dim = pf_dim\n","\n","        self.device = device\n","\n","        #각 단어를 hidden_dim 만큼 embedding 합니다. \n","        self.tok_embedding = nn.Embedding(input_dim, hidden_dim) \n","        #max_length의 길이로 들어온 데이터의 위치 데이터를 positional encoding으로 나타냄\n","        self.pos_embedding = nn.Embedding(max_length, hidden_dim)\n","        \n","        #n개 만큼 EncoderLayer 생성\n","        self.layers = nn.ModuleList([EncoderLayer(hidden_dim, n_heads, pf_dim, device) for _ in range(n_layers)])\n","\n","        self.scale = torch.sqrt(torch.FloatTensor([hidden_dim])).to(device)\n","\n","\n","    #학습을 위한 layer 추가 함수\n","    def append_layer(self):\n","      self.layers.append(EncoderLayer(self.hidden_dim, self.n_heads, self.pf_dim, self.device))\n","      self.n_layers += 1\n","\n","      \n","    # 기존과 다르게 각 레이어의 output을 리스트의 형태로 모두 리턴합니다.\n","    def forward(self, src, src_mask):\n","\n","        # src: [batch_size, src_len]\n","        # src_mask: [batch_size, src_len]\n","\n","        batch_size = src.shape[0]\n","        src_len = src.shape[1]\n","        \n","        \n","\n","        pos = torch.arange(0, src_len).unsqueeze(0).repeat(batch_size, 1).to(self.device)\n","\n","        # pos: [batch_size, src_len]\n","\n","        \n","\n","        # 소스 문장의 임베딩과 위치 임베딩을 더한 것을 사용\n","        src =(self.tok_embedding(src) * self.scale) + self.pos_embedding(pos)\n","\n","        # src: [batch_size, src_len, hidden_dim]\n","\n","        ret_src = [src]\n","\n","        # 모든 인코더 레이어를 차례대로 거치면서 순전파(forward) 수행\n","        for layer in self.layers:\n","            ret_src.append(layer(ret_src[-1], src_mask))\n","\n","        # src: [batch_size, src_len, hidden_dim]\n","\n","        return ret_src # 마지막 레이어의 출력을 반환\n","\n","    "]},{"cell_type":"markdown","metadata":{"id":"2eELOvOIZHJ5"},"source":["## 디코더 레이어\n","셀프 어텐션 - 인코더 디코더 어텐션 - feedforward\n","의 순서로 진행"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MOkywYA-Yx_h"},"outputs":[],"source":["class DecoderLayer(nn.Module):\n","    def __init__(self, hidden_dim, n_heads, pf_dim, device):\n","        super().__init__()\n","\n","        self.self_attn_layer_norm = nn.LayerNorm(hidden_dim)\n","        self.enc_attn_layer_norm = nn.LayerNorm(hidden_dim)\n","        self.ff_layer_norm = nn.LayerNorm(hidden_dim)\n","        self.self_attention = MultiHeadAttentionLayer(hidden_dim, n_heads, device)\n","        self.encoder_attention = MultiHeadAttentionLayer(hidden_dim, n_heads, device)\n","        self.positionwise_feedforward = PositionwiseFeedforwardLayer(hidden_dim, pf_dim)\n","        \n","\n","    # 인코더의 출력 값(enc_src)을 어텐션(attention)하는 구조\n","    def forward(self, trg, enc_src, trg_mask, src_mask):\n","\n","        # trg: [batch_size, trg_len, hidden_dim]\n","        # enc_src: [n_layers, batch_size, src_len, hidden_dim] <= 인코더를 거쳐간 결과 각 레이어 층에서의 결과 모두 사용\n","        # trg_mask: [batch_size, trg_len]\n","        # src_mask: [batch_size, src_len]\n","\n","        # self attention\n","        # 자기 자신에 대하여 어텐션(attention)\n","        _trg, _ = self.self_attention(trg, trg, trg, trg_mask)\n","\n","        # residual connection and layer norm\n","        trg = self.self_attn_layer_norm(trg + _trg)\n","\n","        # trg: [batch_size, trg_len, hidden_dim]\n","\n","        # encoder attention\n","        # 디코더의 쿼리(Query)를 이용해 인코더를 어텐션(attention)\n","        _trg, attention = self.encoder_attention(trg, enc_src, enc_src, src_mask)\n","\n","        # residual connection and layer norm\n","        trg = self.enc_attn_layer_norm(trg + _trg)\n","\n","        # trg: [batch_size, trg_len, hidden_dim]\n","\n","        # positionwise feedforward\n","        _trg = self.positionwise_feedforward(trg)\n","\n","        # residual and layer norm\n","        trg = self.ff_layer_norm(trg + _trg)\n","\n","        # trg: [batch_size, trg_len, hidden_dim]\n","        # attention: [batch_size, n_heads, trg_len, src_len]\n","\n","        return trg, attention"]},{"cell_type":"markdown","source":["## 디코더 \n","인코더와 비슷한 형태이지만 layer에 attention이 2개가 존재하며 하나는 encoder에서 추출한 데이터를 K, V로 사용합니다."],"metadata":{"id":"atPVyeVRg9Ey"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"QxU4uzejY7gn"},"outputs":[],"source":["class Decoder(nn.Module):\n","    def __init__(self, output_dim, hidden_dim, n_layers, n_heads, pf_dim, device, max_length=100):\n","        super().__init__()\n","\n","        self.device = device\n","\n","        self.tok_embedding = nn.Embedding(output_dim, hidden_dim)\n","        self.pos_embedding = nn.Embedding(max_length, hidden_dim)\n","\n","        self.layers = nn.ModuleList([DecoderLayer(hidden_dim, n_heads, pf_dim,  device) for _ in range(n_layers)])\n","\n","        self.fc_out = nn.Linear(hidden_dim, output_dim)\n","\n","\n","        self.scale = torch.sqrt(torch.FloatTensor([hidden_dim])).to(device)\n","\n","    \n","    def forward(self, trg, enc_src, trg_mask, src_mask):\n","\n","        # trg: [batch_size, trg_len]\n","        # enc_src: [batch_size, src_len, hidden_dim]\n","        # trg_mask: [batch_size, trg_len]\n","        # src_mask: [batch_size, src_len]\n","\n","        batch_size = trg.shape[0]\n","        trg_len = trg.shape[1]\n","\n","        pos = torch.arange(0, trg_len).unsqueeze(0).repeat(batch_size, 1).to(self.device)\n","\n","        # pos: [batch_size, trg_len]\n","\n","        trg = (self.tok_embedding(trg) * self.scale) + self.pos_embedding(pos)\n","\n","        # trg: [batch_size, trg_len, hidden_dim]\n","        i = 0\n","        \n","        for layer in self.layers:\n","            # 소스 마스크와 타겟 마스크 모두 사용\n","            # 병렬적으로 레이어를 사용 하지만 인코더보다 레이어가 많아 질 경우 마지막 인코더 레이어에서의 src를 사용\n","            trg, attention = layer(trg, enc_src[i], trg_mask, src_mask)\n","            if i < len(enc_src) - 1:\n","              i += 1\n","            \n","\n","        # trg: [batch_size, trg_len, hidden_dim]\n","        # attention: [batch_size, n_heads, trg_len, src_len]\n","\n","        output = self.fc_out(trg)\n","\n","        # output: [batch_size, trg_len, output_dim]\n","\n","        return output, attention"]},{"cell_type":"markdown","source":["##Transformer\n","마스크를 마지막으로 구현하고 인코더와 디코더를 이용하여 \n","output과 attention을 구합니다."],"metadata":{"id":"u40Fm6myhPi6"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"BP_uP65bZj_F"},"outputs":[],"source":["class Transformer(nn.Module):\n","    def __init__(self, encoder, decoder, src_pad_idx, trg_pad_idx, device):\n","        super().__init__()\n","\n","        self.encoder = encoder\n","        self.decoder = decoder\n","        self.src_pad_idx = src_pad_idx\n","        self.trg_pad_idx = trg_pad_idx\n","        self.device = device\n","\n","    # 소스 문장의 <pad> 토큰에 대하여 마스크(mask) 값을 0으로 설정\n","    def make_src_mask(self, src):\n","\n","        # src: [batch_size, src_len]\n","\n","        src_mask = (src != self.src_pad_idx).unsqueeze(1).unsqueeze(2)\n","\n","        # src_mask: [batch_size, 1, 1, src_len]\n","\n","        return src_mask\n","\n","    # 타겟 문장에서 각 단어는 다음 단어가 무엇인지 알 수 없도록(이전 단어만 보도록) 만들기 위해 마스크를 사용\n","    def make_trg_mask(self, trg):\n","\n","        # trg: [batch_size, trg_len]\n","\n","        \"\"\" (마스크 예시)\n","        1 0 0 0 0\n","        1 1 0 0 0\n","        1 1 1 0 0\n","        1 1 1 0 0\n","        1 1 1 0 0\n","        \"\"\"\n","        trg_pad_mask = (trg != self.trg_pad_idx).unsqueeze(1).unsqueeze(2)\n","\n","        # trg_pad_mask: [batch_size, 1, 1, trg_len]\n","\n","        trg_len = trg.shape[1]\n","\n","        \"\"\" (마스크 예시)\n","        1 0 0 0 0\n","        1 1 0 0 0\n","        1 1 1 0 0\n","        1 1 1 1 0\n","        1 1 1 1 1\n","        \"\"\"\n","        trg_sub_mask = torch.tril(torch.ones((trg_len, trg_len), device = self.device)).bool()\n","\n","        # trg_sub_mask: [trg_len, trg_len]\n","\n","        trg_mask = trg_pad_mask & trg_sub_mask\n","\n","        # trg_mask: [batch_size, 1, trg_len, trg_len]\n","\n","        return trg_mask\n","\n","    \n","    #트렌스포머 내의 인코더에 레이어를 추가하는 함수\n","    def append_encoderlayer(self):\n","      self.encoder.append_layer()\n","\n","\n","    def forward(self, src, trg):\n","\n","        # src: [batch_size, src_len]\n","        # trg: [batch_size, trg_len]\n","\n","        src_mask = self.make_src_mask(src)\n","        trg_mask = self.make_trg_mask(trg)\n","\n","        # src_mask: [batch_size, 1, 1, src_len]\n","        # trg_mask: [batch_size, 1, trg_len, trg_len]\n","\n","        enc_src = self.encoder(src, src_mask)\n","\n","        # enc_src: [n_layers,batch_size, src_len, hidden_dim]\n","\n","        output, attention = self.decoder(trg, enc_src, trg_mask, src_mask)\n","\n","        # output: [batch_size, trg_len, output_dim]\n","        # attention: [batch_size, n_heads, trg_len, src_len]\n","\n","        return output, attention"]},{"cell_type":"markdown","source":["##학습시키기 \n"],"metadata":{"id":"Vn-XVGcHhyHS"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"zbJWJDKRaD53"},"outputs":[],"source":["INPUT_DIM = len(SRC.vocab)\n","OUTPUT_DIM = len(TRG.vocab)\n","HIDDEN_DIM = 32\n","ENC_LAYERS = 3\n","DEC_LAYERS = 3\n","ENC_HEADS = 4\n","DEC_HEADS = 4\n","ENC_PF_DIM = 64\n","DEC_PF_DIM = 64\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mRPV463gaGGQ"},"outputs":[],"source":["SRC_PAD_IDX = SRC.vocab.stoi[SRC.pad_token]\n","TRG_PAD_IDX = TRG.vocab.stoi[TRG.pad_token]\n","\n","# 인코더(encoder)와 디코더(decoder) 객체 선언\n","enc = Encoder(INPUT_DIM, HIDDEN_DIM, ENC_LAYERS, ENC_HEADS, ENC_PF_DIM, device)\n","dec = Decoder(OUTPUT_DIM, HIDDEN_DIM, DEC_LAYERS, DEC_HEADS, DEC_PF_DIM, device)\n","\n","# Transformer 객체 선언\n","model = Transformer(enc, dec, SRC_PAD_IDX, TRG_PAD_IDX, device).to(device)"]},{"cell_type":"markdown","source":["파라미터 개수 확인"],"metadata":{"id":"gxEYAr7Ah3qd"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1645689523387,"user":{"displayName":"박주형","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14658027942663441417"},"user_tz":-540},"id":"rX4nQkF7aHZW","outputId":"7e133e49-788c-418d-b200-59a71f26b4f9"},"outputs":[{"output_type":"stream","name":"stdout","text":["The model has 704,933 trainable parameters\n"]}],"source":["def count_parameters(model):\n","    return sum(p.numel() for p in model.parameters() if p.requires_grad)\n","\n","print(f'The model has {count_parameters(model):,} trainable parameters')"]},{"cell_type":"markdown","source":["weight 초기화"],"metadata":{"id":"WEJDW_Kzh7pF"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1645689523388,"user":{"displayName":"박주형","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14658027942663441417"},"user_tz":-540},"id":"aYbBIrneboyC","outputId":"ddace202-4fd8-4187-8c92-13f41e1d11e9"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Transformer(\n","  (encoder): Encoder(\n","    (tok_embedding): Embedding(7855, 32)\n","    (pos_embedding): Embedding(100, 32)\n","    (layers): ModuleList(\n","      (0): EncoderLayer(\n","        (self_attn_layer_norm): LayerNorm((32,), eps=1e-05, elementwise_affine=True)\n","        (ff_layer_norm): LayerNorm((32,), eps=1e-05, elementwise_affine=True)\n","        (self_attention): MultiHeadAttentionLayer(\n","          (fc_q): Linear(in_features=32, out_features=32, bias=True)\n","          (fc_k): Linear(in_features=32, out_features=32, bias=True)\n","          (fc_v): Linear(in_features=32, out_features=32, bias=True)\n","          (fc_o): Linear(in_features=32, out_features=32, bias=True)\n","        )\n","        (positionwise_feedforward): PositionwiseFeedforwardLayer(\n","          (fc_1): Linear(in_features=32, out_features=64, bias=True)\n","          (fc_2): Linear(in_features=64, out_features=32, bias=True)\n","        )\n","      )\n","      (1): EncoderLayer(\n","        (self_attn_layer_norm): LayerNorm((32,), eps=1e-05, elementwise_affine=True)\n","        (ff_layer_norm): LayerNorm((32,), eps=1e-05, elementwise_affine=True)\n","        (self_attention): MultiHeadAttentionLayer(\n","          (fc_q): Linear(in_features=32, out_features=32, bias=True)\n","          (fc_k): Linear(in_features=32, out_features=32, bias=True)\n","          (fc_v): Linear(in_features=32, out_features=32, bias=True)\n","          (fc_o): Linear(in_features=32, out_features=32, bias=True)\n","        )\n","        (positionwise_feedforward): PositionwiseFeedforwardLayer(\n","          (fc_1): Linear(in_features=32, out_features=64, bias=True)\n","          (fc_2): Linear(in_features=64, out_features=32, bias=True)\n","        )\n","      )\n","      (2): EncoderLayer(\n","        (self_attn_layer_norm): LayerNorm((32,), eps=1e-05, elementwise_affine=True)\n","        (ff_layer_norm): LayerNorm((32,), eps=1e-05, elementwise_affine=True)\n","        (self_attention): MultiHeadAttentionLayer(\n","          (fc_q): Linear(in_features=32, out_features=32, bias=True)\n","          (fc_k): Linear(in_features=32, out_features=32, bias=True)\n","          (fc_v): Linear(in_features=32, out_features=32, bias=True)\n","          (fc_o): Linear(in_features=32, out_features=32, bias=True)\n","        )\n","        (positionwise_feedforward): PositionwiseFeedforwardLayer(\n","          (fc_1): Linear(in_features=32, out_features=64, bias=True)\n","          (fc_2): Linear(in_features=64, out_features=32, bias=True)\n","        )\n","      )\n","    )\n","  )\n","  (decoder): Decoder(\n","    (tok_embedding): Embedding(5893, 32)\n","    (pos_embedding): Embedding(100, 32)\n","    (layers): ModuleList(\n","      (0): DecoderLayer(\n","        (self_attn_layer_norm): LayerNorm((32,), eps=1e-05, elementwise_affine=True)\n","        (enc_attn_layer_norm): LayerNorm((32,), eps=1e-05, elementwise_affine=True)\n","        (ff_layer_norm): LayerNorm((32,), eps=1e-05, elementwise_affine=True)\n","        (self_attention): MultiHeadAttentionLayer(\n","          (fc_q): Linear(in_features=32, out_features=32, bias=True)\n","          (fc_k): Linear(in_features=32, out_features=32, bias=True)\n","          (fc_v): Linear(in_features=32, out_features=32, bias=True)\n","          (fc_o): Linear(in_features=32, out_features=32, bias=True)\n","        )\n","        (encoder_attention): MultiHeadAttentionLayer(\n","          (fc_q): Linear(in_features=32, out_features=32, bias=True)\n","          (fc_k): Linear(in_features=32, out_features=32, bias=True)\n","          (fc_v): Linear(in_features=32, out_features=32, bias=True)\n","          (fc_o): Linear(in_features=32, out_features=32, bias=True)\n","        )\n","        (positionwise_feedforward): PositionwiseFeedforwardLayer(\n","          (fc_1): Linear(in_features=32, out_features=64, bias=True)\n","          (fc_2): Linear(in_features=64, out_features=32, bias=True)\n","        )\n","      )\n","      (1): DecoderLayer(\n","        (self_attn_layer_norm): LayerNorm((32,), eps=1e-05, elementwise_affine=True)\n","        (enc_attn_layer_norm): LayerNorm((32,), eps=1e-05, elementwise_affine=True)\n","        (ff_layer_norm): LayerNorm((32,), eps=1e-05, elementwise_affine=True)\n","        (self_attention): MultiHeadAttentionLayer(\n","          (fc_q): Linear(in_features=32, out_features=32, bias=True)\n","          (fc_k): Linear(in_features=32, out_features=32, bias=True)\n","          (fc_v): Linear(in_features=32, out_features=32, bias=True)\n","          (fc_o): Linear(in_features=32, out_features=32, bias=True)\n","        )\n","        (encoder_attention): MultiHeadAttentionLayer(\n","          (fc_q): Linear(in_features=32, out_features=32, bias=True)\n","          (fc_k): Linear(in_features=32, out_features=32, bias=True)\n","          (fc_v): Linear(in_features=32, out_features=32, bias=True)\n","          (fc_o): Linear(in_features=32, out_features=32, bias=True)\n","        )\n","        (positionwise_feedforward): PositionwiseFeedforwardLayer(\n","          (fc_1): Linear(in_features=32, out_features=64, bias=True)\n","          (fc_2): Linear(in_features=64, out_features=32, bias=True)\n","        )\n","      )\n","      (2): DecoderLayer(\n","        (self_attn_layer_norm): LayerNorm((32,), eps=1e-05, elementwise_affine=True)\n","        (enc_attn_layer_norm): LayerNorm((32,), eps=1e-05, elementwise_affine=True)\n","        (ff_layer_norm): LayerNorm((32,), eps=1e-05, elementwise_affine=True)\n","        (self_attention): MultiHeadAttentionLayer(\n","          (fc_q): Linear(in_features=32, out_features=32, bias=True)\n","          (fc_k): Linear(in_features=32, out_features=32, bias=True)\n","          (fc_v): Linear(in_features=32, out_features=32, bias=True)\n","          (fc_o): Linear(in_features=32, out_features=32, bias=True)\n","        )\n","        (encoder_attention): MultiHeadAttentionLayer(\n","          (fc_q): Linear(in_features=32, out_features=32, bias=True)\n","          (fc_k): Linear(in_features=32, out_features=32, bias=True)\n","          (fc_v): Linear(in_features=32, out_features=32, bias=True)\n","          (fc_o): Linear(in_features=32, out_features=32, bias=True)\n","        )\n","        (positionwise_feedforward): PositionwiseFeedforwardLayer(\n","          (fc_1): Linear(in_features=32, out_features=64, bias=True)\n","          (fc_2): Linear(in_features=64, out_features=32, bias=True)\n","        )\n","      )\n","    )\n","    (fc_out): Linear(in_features=32, out_features=5893, bias=True)\n","  )\n",")"]},"metadata":{},"execution_count":23}],"source":["def initialize_weights(m):\n","    if hasattr(m, 'weight') and m.weight.dim() > 1:\n","        nn.init.xavier_uniform_(m.weight.data)\n","\n","model.apply(initialize_weights)"]},{"cell_type":"markdown","source":["옵티마이져로 Adam을 사용합니다."],"metadata":{"id":"SWzCJrsAh-6k"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"oqiQUFEkbsTH"},"outputs":[],"source":["import torch.optim as optim\n","\n","# Adam optimizer로 학습 최적화\n","LEARNING_RATE = 0.0005\n","optimizer = torch.optim.Adam(model.parameters(), lr=LEARNING_RATE)\n","\n","# 뒷 부분의 패딩(padding)에 대해서는 값 무시\n","criterion = nn.CrossEntropyLoss(ignore_index = TRG_PAD_IDX)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"61f7Nx49buPL"},"outputs":[],"source":["def train(model, iterator, optimizer, criterion, clip):\n","    model.train() # 학습 모드\n","    epoch_loss = 0\n","\n","    # 전체 학습 데이터를 확인하며\n","    for i, batch in enumerate(iterator):\n","        \n","        src = batch.src\n","        trg = batch.trg\n","\n","        optimizer.zero_grad()\n","\n","        # 출력 단어의 마지막 인덱스(<eos>)는 제외\n","        # 입력을 할 때는 <sos>부터 시작하도록 처리\n","        output, _ = model(src, trg[:,:-1])\n","\n","        # output: [배치 크기, trg_len - 1, output_dim]\n","        # trg: [배치 크기, trg_len]\n","\n","        output_dim = output.shape[-1]\n","\n","        output = output.contiguous().view(-1, output_dim)\n","        # 출력 단어의 인덱스 0(<sos>)은 제외\n","        trg = trg[:,1:].contiguous().view(-1)\n","\n","        # output: [배치 크기 * trg_len - 1, output_dim]\n","        # trg: [배치 크기 * trg len - 1]\n","\n","        # 모델의 출력 결과와 타겟 문장을 비교하여 손실 계산\n","        loss = criterion(output, trg)\n","        loss.backward() # 기울기(gradient) 계산\n","\n","        # 기울기(gradient) clipping 진행\n","        torch.nn.utils.clip_grad_norm_(model.parameters(), clip)\n","\n","        # 파라미터 업데이트\n","        optimizer.step()\n","\n","        # 전체 손실 값 계산\n","        epoch_loss += loss.item()\n","\n","    return epoch_loss / len(iterator)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Ln3UqHnGbv1L"},"outputs":[],"source":["def evaluate(model, iterator, criterion):\n","    model.eval() # 평가 모드\n","    epoch_loss = 0\n","\n","    with torch.no_grad():\n","        # 전체 평가 데이터를 확인하며\n","        for i, batch in enumerate(iterator):\n","            src = batch.src\n","            trg = batch.trg\n","\n","            # 출력 단어의 마지막 인덱스(<eos>)는 제외\n","            # 입력을 할 때는 <sos>부터 시작하도록 처리\n","            output, _ = model(src, trg[:,:-1])\n","\n","            # output: [배치 크기, trg_len - 1, output_dim]\n","            # trg: [배치 크기, trg_len]\n","\n","            output_dim = output.shape[-1]\n","\n","            output = output.contiguous().view(-1, output_dim)\n","            # 출력 단어의 인덱스 0(<sos>)은 제외\n","            trg = trg[:,1:].contiguous().view(-1)\n","\n","            # output: [배치 크기 * trg_len - 1, output_dim]\n","            # trg: [배치 크기 * trg len - 1]\n","\n","            # 모델의 출력 결과와 타겟 문장을 비교하여 손실 계산\n","            loss = criterion(output, trg)\n","\n","            # 전체 손실 값 계산\n","            epoch_loss += loss.item()\n","\n","    return epoch_loss / len(iterator)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WY8qWuYcbxoi"},"outputs":[],"source":["import math\n","import time\n","\n","def epoch_time(start_time, end_time):\n","    elapsed_time = end_time - start_time\n","    elapsed_mins = int(elapsed_time / 60)\n","    elapsed_secs = int(elapsed_time - (elapsed_mins * 60))\n","    return elapsed_mins, elapsed_secs"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XIE1kBZUbzfD","outputId":"c2278ec4-0609-41cd-c532-93bf7e034716","executionInfo":{"status":"ok","timestamp":1645690583993,"user_tz":-540,"elapsed":1060161,"user":{"displayName":"박주형","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14658027942663441417"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 01 | Time: 1m 48s\n","\tTrain Loss: 6.616 | Train PPL: 747.217\n","\tValidation Loss: 5.265 | Validation PPL: 193.447\n","Epoch: 02 | Time: 1m 44s\n","\tTrain Loss: 4.758 | Train PPL: 116.568\n","\tValidation Loss: 4.126 | Validation PPL: 61.927\n","Epoch: 03 | Time: 1m 43s\n","\tTrain Loss: 3.860 | Train PPL: 47.473\n","\tValidation Loss: 3.488 | Validation PPL: 32.731\n","Epoch: 04 | Time: 1m 44s\n","\tTrain Loss: 3.349 | Train PPL: 28.466\n","\tValidation Loss: 3.126 | Validation PPL: 22.788\n","Epoch: 05 | Time: 1m 44s\n","\tTrain Loss: 3.017 | Train PPL: 20.425\n","\tValidation Loss: 2.903 | Validation PPL: 18.227\n","Epoch: 06 | Time: 1m 48s\n","\tTrain Loss: 2.767 | Train PPL: 15.918\n","\tValidation Loss: 2.739 | Validation PPL: 15.464\n","Epoch: 07 | Time: 1m 46s\n","\tTrain Loss: 2.568 | Train PPL: 13.043\n","\tValidation Loss: 2.619 | Validation PPL: 13.716\n","Epoch: 08 | Time: 1m 47s\n","\tTrain Loss: 2.410 | Train PPL: 11.131\n","\tValidation Loss: 2.537 | Validation PPL: 12.637\n","Epoch: 09 | Time: 1m 45s\n","\tTrain Loss: 2.275 | Train PPL: 9.728\n","\tValidation Loss: 2.472 | Validation PPL: 11.850\n","Epoch: 10 | Time: 1m 47s\n","\tTrain Loss: 2.162 | Train PPL: 8.687\n","\tValidation Loss: 2.423 | Validation PPL: 11.285\n"]}],"source":["import time\n","import math\n","import random\n","\n","N_EPOCHS = 10\n","CLIP = 1\n","best_valid_loss = float('inf')\n","\n","for epoch in range(N_EPOCHS):\n","    start_time = time.time() # 시작 시간 기록\n","\n","    train_loss = train(model, train_iterator, optimizer, criterion, CLIP)\n","    valid_loss = evaluate(model, valid_iterator, criterion)\n","\n","    end_time = time.time() # 종료 시간 기록\n","    epoch_mins, epoch_secs = epoch_time(start_time, end_time)\n","\n","    if valid_loss < best_valid_loss:\n","        best_valid_loss = valid_loss\n","        torch.save(model.state_dict(), 'transformer_german_to_english.pt')\n","\n","    print(f'Epoch: {epoch + 1:02} | Time: {epoch_mins}m {epoch_secs}s')\n","    print(f'\\tTrain Loss: {train_loss:.3f} | Train PPL: {math.exp(train_loss):.3f}')\n","    print(f'\\tValidation Loss: {valid_loss:.3f} | Validation PPL: {math.exp(valid_loss):.3f}')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3JgjMHnYb0j4"},"outputs":[],"source":["# 번역(translation) 함수\n","def translate_sentence(sentence, src_field, trg_field, model, device, max_len=50, logging=True):\n","    model.eval() # 평가 모드\n","\n","    if isinstance(sentence, str):\n","        nlp = spacy.load('de')\n","        tokens = [token.text.lower() for token in nlp(sentence)]\n","    else:\n","        tokens = [token.lower() for token in sentence]\n","\n","    # 처음에 <sos> 토큰, 마지막에 <eos> 토큰 붙이기\n","    tokens = [src_field.init_token] + tokens + [src_field.eos_token]\n","    if logging:\n","        print(f\"전체 소스 토큰: {tokens}\")\n","\n","    src_indexes = [src_field.vocab.stoi[token] for token in tokens]\n","    if logging:\n","        print(f\"소스 문장 인덱스: {src_indexes}\")\n","\n","    src_tensor = torch.LongTensor(src_indexes).unsqueeze(0).to(device)\n","\n","    # 소스 문장에 따른 마스크 생성\n","    src_mask = model.make_src_mask(src_tensor)\n","\n","    # 인코더(endocer)에 소스 문장을 넣어 출력 값 구하기\n","    with torch.no_grad():\n","        enc_src = model.encoder(src_tensor, src_mask)\n","\n","    # 처음에는 <sos> 토큰 하나만 가지고 있도록 하기\n","    trg_indexes = [trg_field.vocab.stoi[trg_field.init_token]]\n","\n","    for i in range(max_len):\n","        trg_tensor = torch.LongTensor(trg_indexes).unsqueeze(0).to(device)\n","\n","        # 출력 문장에 따른 마스크 생성\n","        trg_mask = model.make_trg_mask(trg_tensor)\n","\n","        with torch.no_grad():\n","            output, attention = model.decoder(trg_tensor, enc_src, trg_mask, src_mask)\n","\n","        # 출력 문장에서 가장 마지막 단어만 사용\n","        pred_token = output.argmax(2)[:,-1].item()\n","        trg_indexes.append(pred_token) # 출력 문장에 더하기\n","\n","        # <eos>를 만나는 순간 끝\n","        if pred_token == trg_field.vocab.stoi[trg_field.eos_token]:\n","            break\n","\n","    # 각 출력 단어 인덱스를 실제 단어로 변환\n","    trg_tokens = [trg_field.vocab.itos[i] for i in trg_indexes]\n","\n","    # 첫 번째 <sos>는 제외하고 출력 문장 반환\n","    return trg_tokens[1:], attention"]},{"cell_type":"code","source":["example_idx = 30\n","\n","src = vars(test_dataset.examples[example_idx])['src']\n","trg = vars(test_dataset.examples[example_idx])['trg']\n","\n","print(f'소스 문장: {src}')\n","print(f'타겟 문장: {trg}')\n","\n","translation, attention = translate_sentence(src, SRC, TRG, model, device, logging=True)\n","\n","print(\"모델 출력 결과:\", \" \".join(translation))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cNHcDbJuedwD","executionInfo":{"status":"ok","timestamp":1645690583994,"user_tz":-540,"elapsed":7,"user":{"displayName":"박주형","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14658027942663441417"}},"outputId":"14cca567-4a0d-4d4f-8f73-fdfa592550fb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["소스 문장: ['sechs', 'leute', 'fahren', 'mountainbikes', 'durch', 'eine', 'dschungellandschaft', '.']\n","타겟 문장: ['six', 'people', 'ride', 'mountain', 'bikes', 'through', 'a', 'jungle', 'environment', '.']\n","전체 소스 토큰: ['<sos>', 'sechs', 'leute', 'fahren', 'mountainbikes', 'durch', 'eine', 'dschungellandschaft', '.', '<eos>']\n","소스 문장 인덱스: [2, 413, 73, 137, 4891, 58, 8, 0, 4, 3]\n","모델 출력 결과: six people are riding through people riding through people . <eos>\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import matplotlib.ticker as ticker\n","\n","def display_attention(sentence, translation, attention, n_heads=4, n_rows=4, n_cols=2):\n","\n","   \n","\n","    # 출력할 그림 크기 조절\n","    fig = plt.figure(figsize=(15, 25))\n","\n","    for i in range(n_heads):\n","        ax = fig.add_subplot(n_rows, n_cols, i + 1)\n","\n","        # 어텐션(Attention) 스코어 확률 값을 이용해 그리기\n","        _attention = attention.squeeze(0)[i].cpu().detach().numpy()\n","\n","        cax = ax.matshow(_attention, cmap='bone')\n","\n","        ax.tick_params(labelsize=12)\n","        ax.set_xticklabels([''] + ['<sos>'] + [t.lower() for t in sentence] + ['<eos>'], rotation=45)\n","        ax.set_yticklabels([''] + translation)\n","\n","        ax.xaxis.set_major_locator(ticker.MultipleLocator(1))\n","        ax.yaxis.set_major_locator(ticker.MultipleLocator(1))\n","\n","    plt.show()\n","    plt.close()"],"metadata":{"id":"plOnbkjfefEX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["example_idx = 30\n","\n","src = vars(test_dataset.examples[example_idx])['src']\n","trg = vars(test_dataset.examples[example_idx])['trg']\n","\n","print(f'소스 문장: {src}')\n","print(f'타겟 문장: {trg}')\n","\n","translation, attention = translate_sentence(src, SRC, TRG, model, device, logging=True)\n","\n","print(\"모델 출력 결과:\", \" \".join(translation))\n","\n","display_attention(src, translation, attention)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":881},"id":"jnFv0BY_e3St","executionInfo":{"status":"ok","timestamp":1645691754411,"user_tz":-540,"elapsed":883,"user":{"displayName":"박주형","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14658027942663441417"}},"outputId":"7a5c84e6-20f6-49db-cbfe-188496c5cb62"},"execution_count":35,"outputs":[{"output_type":"stream","name":"stdout","text":["소스 문장: ['sechs', 'leute', 'fahren', 'mountainbikes', 'durch', 'eine', 'dschungellandschaft', '.']\n","타겟 문장: ['six', 'people', 'ride', 'mountain', 'bikes', 'through', 'a', 'jungle', 'environment', '.']\n","전체 소스 토큰: ['<sos>', 'sechs', 'leute', 'fahren', 'mountainbikes', 'durch', 'eine', 'dschungellandschaft', '.', '<eos>']\n","소스 문장 인덱스: [2, 413, 73, 137, 4891, 58, 8, 0, 4, 3]\n","모델 출력 결과: six people are riding through people riding through people . <eos>\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1080x1800 with 4 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["from torchtext.data.metrics import bleu_score\n","\n","def show_bleu(data, src_field, trg_field, model, device, max_len=50):\n","    trgs = []\n","    pred_trgs = []\n","    index = 0\n","\n","    for datum in data:\n","        src = vars(datum)['src']\n","        trg = vars(datum)['trg']\n","\n","        pred_trg, _ = translate_sentence(src, src_field, trg_field, model, device, max_len, logging=False)\n","\n","        # 마지막 <eos> 토큰 제거\n","        pred_trg = pred_trg[:-1]\n","\n","        pred_trgs.append(pred_trg)\n","        trgs.append([trg])\n","\n","        index += 1\n","        if (index + 1) % 100 == 0:\n","            print(f\"[{index + 1}/{len(data)}]\")\n","            print(f\"예측: {pred_trg}\")\n","            print(f\"정답: {trg}\")\n","\n","    bleu = bleu_score(pred_trgs, trgs, max_n=4, weights=[0.25, 0.25, 0.25, 0.25])\n","    print(f'Total BLEU Score = {bleu*100:.2f}')\n","\n","    individual_bleu1_score = bleu_score(pred_trgs, trgs, max_n=4, weights=[1, 0, 0, 0])\n","    individual_bleu2_score = bleu_score(pred_trgs, trgs, max_n=4, weights=[0, 1, 0, 0])\n","    individual_bleu3_score = bleu_score(pred_trgs, trgs, max_n=4, weights=[0, 0, 1, 0])\n","    individual_bleu4_score = bleu_score(pred_trgs, trgs, max_n=4, weights=[0, 0, 0, 1])\n","\n","    print(f'Individual BLEU1 score = {individual_bleu1_score*100:.2f}') \n","    print(f'Individual BLEU2 score = {individual_bleu2_score*100:.2f}') \n","    print(f'Individual BLEU3 score = {individual_bleu3_score*100:.2f}') \n","    print(f'Individual BLEU4 score = {individual_bleu4_score*100:.2f}') \n","\n","    cumulative_bleu1_score = bleu_score(pred_trgs, trgs, max_n=4, weights=[1, 0, 0, 0])\n","    cumulative_bleu2_score = bleu_score(pred_trgs, trgs, max_n=4, weights=[1/2, 1/2, 0, 0])\n","    cumulative_bleu3_score = bleu_score(pred_trgs, trgs, max_n=4, weights=[1/3, 1/3, 1/3, 0])\n","    cumulative_bleu4_score = bleu_score(pred_trgs, trgs, max_n=4, weights=[1/4, 1/4, 1/4, 1/4])\n","\n","    print(f'Cumulative BLEU1 score = {cumulative_bleu1_score*100:.2f}') \n","    print(f'Cumulative BLEU2 score = {cumulative_bleu2_score*100:.2f}') \n","    print(f'Cumulative BLEU3 score = {cumulative_bleu3_score*100:.2f}') \n","    print(f'Cumulative BLEU4 score = {cumulative_bleu4_score*100:.2f}') "],"metadata":{"id":"IbWugG4Re7sV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["show_bleu(test_dataset, SRC, TRG, model, device)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FLll9LYNtQWN","executionInfo":{"status":"ok","timestamp":1645691038743,"user_tz":-540,"elapsed":36714,"user":{"displayName":"박주형","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14658027942663441417"}},"outputId":"c8e2a72a-86ad-4e1e-f782-3bfadf07ac8d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[100/1000]\n","예측: ['a', 'group', 'of', 'asian', 'children', 'sitting', 'around', 'sitting', 'around', 'outside', 'of', 'blue', 'chairs', '.']\n","정답: ['a', 'group', 'of', 'mostly', 'asian', 'children', 'sitting', 'at', 'cubicles', 'in', 'blue', 'chairs', '.']\n","[200/1000]\n","예측: ['people', 'in', 'a', 'group', 'of', 'people', 'standing', 'under', 'their', 'hands', '.']\n","정답: ['the', 'group', 'of', 'people', 'are', 'all', 'covered', 'by', 'umbrellas', '.']\n","[300/1000]\n","예측: ['a', 'man', 'in', 'a', 'yellow', 'uniform', 'is', 'trying', 'to', 'be', 'the', 'ball', '.']\n","정답: ['a', 'goalie', 'in', 'a', 'yellow', 'field', 'is', 'protecting', 'the', 'goal', '.']\n","[400/1000]\n","예측: ['two', 'young', 'children', 'on', 'the', 'sand', '.']\n","정답: ['two', 'young', 'children', 'are', 'on', 'sand', '.']\n","[500/1000]\n","예측: ['two', 'blond', 'dogs', 'running', 'through', 'the', 'snow', '.']\n","정답: ['two', 'medium', 'sized', 'dogs', 'run', 'across', 'the', 'snow', '.']\n","[600/1000]\n","예측: ['a', 'group', 'of', 'men', 'sitting', 'while', 'sitting', 'behind', 'a', 'green', 'green', '<unk>', '.']\n","정답: ['a', 'group', 'of', 'men', 'sitting', 'and', 'talking', 'behind', 'some', 'green', 'fruit', '.']\n","[700/1000]\n","예측: ['two', 'people', 'looking', 'at', 'a', 'city', '<unk>', 'at', 'night', '.']\n","정답: ['two', 'people', 'look', 'on', 'in', 'the', 'nighttime', 'at', 'the', 'lights', 'in', 'a', 'city', '.']\n","[800/1000]\n","예측: ['<unk>', ',', '<unk>', ',', 'are', 'riding', 'a', 'bike', '.']\n","정답: ['crowds', 'of', 'people', 'are', 'all', 'riding', 'bicycles', '.']\n","[900/1000]\n","예측: ['children', 'are', 'preparing', 'to', 'the', 'ball', '.']\n","정답: ['kids', 'compete', 'to', 'gain', 'possession', 'of', 'the', 'soccer', 'ball', '.']\n","[1000/1000]\n","예측: ['an', 'older', 'man', 'playing', 'a', 'game', 'in', 'a', 'game', '.']\n","정답: ['an', 'older', 'man', 'is', 'playing', 'a', 'video', 'arcade', 'game', '.']\n","Total BLEU Score = 24.43\n","Individual BLEU1 score = 57.10\n","Individual BLEU2 score = 31.17\n","Individual BLEU3 score = 18.23\n","Individual BLEU4 score = 10.98\n","Cumulative BLEU1 score = 57.10\n","Cumulative BLEU2 score = 42.19\n","Cumulative BLEU3 score = 31.89\n","Cumulative BLEU4 score = 24.43\n"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"xkYHSAFB09il"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"collapsed_sections":[],"name":"P-Transformer","provenance":[],"authorship_tag":"ABX9TyOlWQ0J8f/heH4F9h74FJBT"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}